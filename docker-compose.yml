# version: "3.8"
services:
  # 1) MySQL database
  # mysql:
  #   container_name: my-mysql-container
  #   image: mysql:5.7
  #   ports:
  #     - "3307:3306"
  #   environment:
  #     # MYSQL_ROOT_PASSWORD：容器启动后，会把这个环境变量当作 root 账号的密码。
  #     # MYSQL_DATABASE：在容器初始化时，会自动创建一个名为 webCloud 的数据库（如果不存在）。
  #     # ports: "3307:3306"：把宿主机的 3307 端口映射到容器内的 3306。
  #     # 这样你可以在宿主机上通过 localhost:3307 或 127.0.0.1:3307 来访问该容器内的 MySQL。
  #     MYSQL_ROOT_PASSWORD: "123456"
  #     MYSQL_DATABASE: "webCloud"
  #   networks:
  #     - app-network

  # # 2) Redis cache
  # redis:
  #   container_name: my-redis-container
  #   image: redis:6.2
  #   command: redis-server --requirepass root@123456
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - app-network

  # 3) backend (Spring Boot)
  backend:
    container_name: my-backend-container
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    # environment:
     
    #   SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/webCloud?serverTimezone=UTC"
    #   SPRING_DATASOURCE_USERNAME: "root"
    #   SPRING_DATASOURCE_PASSWORD: "123456"

    #   SPRING_REDIS_HOST: "redis"
    #   SPRING_REDIS_PORT: 6379
    #   SPRING_REDIS_PASSWORD: "root@123456"

    #   # you can add other environment variables, such as
    #   # SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
    #   # ...
    # depends_on:
    #   - mysql
    #   - redis
    networks:
      - app-network

#   # 4) frontend (React)
#   frontend:
#     container_name: my-frontend-container
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     # if you use npm run build + serve in Dockerfile
#     # the service will be provided on port 3000 in the container
#     ports:
#       - "3000:3000"
#     depends_on:
#       - backend
#     networks:
#       - app-network

#   # 5) Nginx
#   nginx:
#     container_name: my-nginx-container
#     image: nginx:alpine
#     # mount your custom configuration file to /etc/nginx/conf.d/default.conf
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro

#     # if you want Nginx to serve the frontend static files, you can copy or mount the build content
#     # volumes:
#     #   - ./frontend/build:/usr/share/nginx/html:ro

#     depends_on:
#       - frontend
#       - backend
#     ports:
#       - "80:80"
#     networks:
#       - app-network

# self-defined network, so that containers can access each other by service name
networks:
  app-network:
    driver: bridge
