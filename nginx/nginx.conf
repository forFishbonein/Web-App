server {
    listen 80;
    server_name _;  # match all hostnames (you can also change it to your domain name)

    # when accessing the root path / or static resources, reverse proxy to the frontend (container host:port => frontend:3000)
    location / {
        proxy_pass http://frontend:3000;
        # or use service name 'frontend:3000', which should be consistent with the name in docker-compose.yml services
        # proxy_pass http://frontend:3000;
    }

    
    # Backend: When accessing /api/..., reverse proxy to the backend
    location /api/ {

        # send /api/xxx to http://backend:8080/xxx
        proxy_pass http://backend:8080/
    }
}

# Client request: When a user accesses your service through a browser or other client, they first connect to your computer (if you are deploying locally) or your server (if you are deploying remotely). This connection is usually made by entering a URL, such as http://localhost (local deployment) or http://your-server.com (remote server deployment).

# Nginx processes the request: The request first reaches the Nginx server. If your Nginx server and your frontend and backend services are all on the same machine (or in the same network environment), Nginx will decide how to handle this request based on its configuration. For example, forward to the frontend or backend service based on the URL path.

# If the request is for the root directory (/) or other static resources, Nginx forwards the request to the frontend service.
# If the request is for an API (such as /api/something), Nginx forwards it to the backend service.
# Service response: After the frontend or backend service processes the request, the response is sent back to Nginx, which then returns these responses to the requesting client.